//###############################################
//---------------------- Buffer -------------------------------

// #### LEDS
//  Buffers 0 - 9, where 0-4 are used for onetime, and 5-9 for loop playback.

// #### EARS
// Buffers 10 - 13, where 10 & 11 are used for onetime, and 12 & 13 for loop playback.

var buffers;;
type BUFFER=[valB stepB lenB posB loopB];;

fun buffersInit len=
  set buffers = tabnew nil len;
  for index = 0; index < len; index + 1 do
    set buffers.index = [valB:""]
;;

fun _bufferFill index step loop val=
  let strlen val -> len in
  set buffers.index = [valB:val stepB:step lenB:len posB:0 loopB:loop];
0;;

fun bufferFill index val=
  _bufferFill index 1 0 val
;;

fun bufferFill3 index val=
  _bufferFill index 3 0 val
;;

fun loopBufferFill index val=
  _bufferFill index 1 1 val
;;

fun loopBufferFill3 index val=
  _bufferFill index 3 1 val
;;

fun buffersFill from to val=
  for index = from; index <= to; index + 1 do
  bufferFill index val
;;

fun buffersFill3 from to val=
  for index = from; index <= to; index + 1 do
  bufferFill3 index val
;;

fun bufferRead index=
  let buffers.index -> buffer in
  if buffer.posB < buffer.lenB then
  (
    set buffer.posB = buffer.posB + buffer.stepB;
    let buffer.posB - buffer.stepB -> pos in
    if buffer.stepB == 3 then
      CtoI3 buffer.valB pos
    else
      strget buffer.valB pos
  ) else if buffer.loopB > 0 && buffer.posB > 0 then (
    set buffer.posB = 0;
    bufferRead index
  )
  else (
    nil
  )
;;

//-----------------------------------------------------
var palette = {0 90 130 170 215 255 255 255};;  // 0x00 0x5a 0x82 0xaa 0xd7 0xFF

fun COtoI r g b=
  r * 36 + g * 6 + b
;;

fun ItoCO val=
  if val == nil then set val = 0;
  if val > 215 then set val = 215;
  let val / 36 -> r in
  let (val % 36) / 6 -> g in
  let (val % 36) % 6 -> b in
  palette.r << 16 + palette.g << 8 + palette.b
;;

// returns number of chars before char \255
fun str_find_end val=
  strstr val "\255" 0
;;

//-----------------------------------------------------
const RESPONSE_HEADER = 0x7f;;

fun parseResponse_ s i res=
  if (i < strlen s) then
  (
    let (strget s i) -> code in
    let (CtoI3 s i+1) -> len in
    (
      if len >= 0 then
      (
        let strsub s i+4 len -> data in
        parseResponse_ s i+4+len [code data]::res
      )
    )
  )
  else (
    res
  )
;;

// messages will be reveresed!
fun parseResponse s=
  if (strget s 0) == RESPONSE_HEADER then
    parseResponse_ s 1 nil
;;
